using AtcoDbPopulator.Models;

namespace AtcoDbPopulator;

public static class CenterTurns
{
    public static void CenterTurnsGenerator(AtcoDbPopulator.Models.Centro center, int month, int year)
    {
        DateTime i = new DateTime(year, month, 1);
        using var dbContext = new AtctablesContext();

        while (i.Month==month)
        {
            var aptPositions = dbContext.Postaziones
                .Where(p => p.IdSettores.Any(s => s.CodAd != null))
                .Distinct()
                .ToList();
            for (int j = 1; j <= NumTurns; j++)
            {
                // TODO allocating only airports, expand.
                CenterTurns.PopulatePositions(dbContext, i, j, aptPositions);
                // TODO addStandby
            }
            i = i.AddDays(1);
        }

        dbContext.SaveChanges();
    }

    private static void PopulatePositions(AtctablesContext dbContext, DateTime date,int shift, ICollection<Postazione> positions)
    {
        foreach (var position in positions)
        {
            Controllore suitableController = GetSuitableController(position, date, shift, dbContext);
            if (suitableController == null)
            {
                throw new InvalidOperationException("No Controller available for the shift.");
            }
            // create shift
            Turno newShift = new Turno()
            {
                IdControllore = suitableController.IdControllore,
                Retribuzione = StandardPay,
                Data = date,
                Slot = shift,
                IdPostazione = position.IdPostazione,
                CentroStandBy = null,
            };
            dbContext.Turnos.Add(newShift);
        }
    }

    private const int StandardPay = 80;

    private static Controllore? GetSuitableController(Postazione position, DateTime date, int shift, AtctablesContext dbContext)
    {
       var suitableControllers = dbContext.Controllores.ToList().Where(c =>
            ControllerIsAble(c, position,dbContext) 
            && ControllerIsNotTired(c, date, shift, dbContext));
       return suitableControllers.OrderBy(c => ShiftsWorked(c, dbContext)).First();
    }

    private const int NumTurns = 3;

    // It would be better to add the methods to the controller class, but since it's autogenerated i preferred to make those method in a static way.
    public static bool ControllerIsAble(Controllore controller, Postazione position, AtctablesContext dbContext)
    {
        var ControllerSkills = dbContext.Abilitaziones
    .Where(a => a.IdControllore == controller.IdControllore)
    .SelectMany(a => a.IdSettores);
        return dbContext.Settores.Where(s=>s.IdPostaziones.Contains(position)).All(s => ControllerSkills.Contains(s));
    }
    public static bool ControllerIsNotTired(Controllore controller, DateTime date, int shift, AtctablesContext dbContext)
    {
        var controllerShifts = dbContext.Turnos.Where(t => t.IdControllore.Equals(controller.IdControllore));
        if (controllerShifts.Count() >= MaxShiftsPerYear) return false;
        var shiftDate = date.AddSeconds(0);
        int shiftNumber = shift - 1;
        for (int i = 0; i <= MandatoryOffShifts; i++)
        {
            if (shiftNumber < 1)
            {
                shiftNumber = shiftsInDays;
                shiftDate.AddDays(-1);
            }

            if (controllerShifts.Any(s => s.Slot == shiftNumber && s.Data.Equals(shiftDate))) return false;
            shiftNumber--;
        }
        return true;
    }

    public static int ShiftsWorked(Controllore controller, AtctablesContext dbContext)
    {
        return dbContext.Turnos.Count(t => t.IdControllore.Equals(controller.IdControllore));
    }

    private const int shiftsInDays = 3;

    private const int MandatoryOffShifts = 3;

    private const int MaxShiftsPerYear = 300;
}